events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

    # Upstream servers for load balancing
    upstream user_service {
        server user-service:5001 max_fails=3 fail_timeout=30s;
    }

    upstream project_task_service {
        server project-task-service:5002 max_fails=3 fail_timeout=30s;
    }

    upstream comment_service {
        server comment-service:5003 max_fails=3 fail_timeout=30s;
    }

    upstream attachment_service {
        server attachment-service:5004 max_fails=3 fail_timeout=30s;
    }

    upstream notification_service {
        server notification-service:5005 max_fails=3 fail_timeout=30s;
    }

    upstream activity_log_service {
        server activity-log-service:5006 max_fails=3 fail_timeout=30s;
    }

    upstream reporting_service {
        server reporting-service:5007 max_fails=3 fail_timeout=30s;
    }

    # Main server configuration
    server {
        listen 80;
        server_name localhost taskapp.local;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Root location - serve a simple landing page or redirect
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Task Management System - Microservices</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        .service { background: #ecf0f1; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .endpoint { font-family: monospace; color: #27ae60; font-weight: bold; }
        .status { float: right; color: #27ae60; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸš€ Task Management System</h1>
        <p><strong>Microservices Architecture</strong></p>
        
        <div class="service">
            <h3>User Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">POST /api/users/register</div>
            <div class="endpoint">POST /api/users/login</div>
            <div class="endpoint">GET /api/users/me</div>
        </div>
        
        <div class="service">
            <h3>Project & Task Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">GET /api/projects</div>
            <div class="endpoint">POST /api/projects</div>
            <div class="endpoint">GET /api/projects/{id}/tasks</div>
        </div>
        
        <div class="service">
            <h3>Comment Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">GET /api/comments</div>
            <div class="endpoint">POST /api/comments</div>
        </div>
        
        <div class="service">
            <h3>Attachment Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">POST /api/attachments</div>
            <div class="endpoint">GET /api/attachments/{id}/download</div>
        </div>
        
        <div class="service">
            <h3>Notification Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">POST /api/notifications</div>
        </div>
        
        <div class="service">
            <h3>Activity Log Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">GET /api/activities</div>
        </div>
        
        <div class="service">
            <h3>Reporting Service <span class="status">âœ“ Running</span></h3>
            <div class="endpoint">POST /api/reports</div>
            <div class="endpoint">GET /api/reports/quick/dashboard</div>
        </div>
        
        <p style="text-align: center; margin-top: 30px; color: #7f8c8d;">
            All services are running and ready to accept requests.
        </p>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Health check endpoint - aggregate health from all services
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"'$time_iso8601'","services":["user","project-task","comment","attachment","notification","activity-log","reporting"]}';
            add_header Content-Type application/json;
        }

        # User Service routes
        location /api/users/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        location /api/register {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        location /api/login {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        location /api/logout {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        location /api/verify-token {
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        location /api/admin/users {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/proxy_params;
        }

        # Project & Task Service routes
        location /api/projects {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://project_task_service;
            include /etc/nginx/proxy_params;
        }

        location /api/tasks {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://project_task_service;
            include /etc/nginx/proxy_params;
        }

        # Comment Service routes
        location /api/comments {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://comment_service;
            include /etc/nginx/proxy_params;
        }

        # Attachment Service routes
        location /api/attachments {
            limit_req zone=api burst=10 nodelay;
            client_max_body_size 20M;
            proxy_pass http://attachment_service;
            include /etc/nginx/proxy_params;
            proxy_read_timeout 300s;
        }

        # Notification Service routes
        location /api/notifications {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://notification_service;
            include /etc/nginx/proxy_params;
        }

        location /api/notification-templates {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://notification_service;
            include /etc/nginx/proxy_params;
        }

        location /api/webhooks {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://notification_service;
            include /etc/nginx/proxy_params;
        }

        # Activity Log Service routes
        location /api/activities {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://activity_log_service;
            include /etc/nginx/proxy_params;
        }

        # Reporting Service routes
        location /api/reports {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://reporting_service;
            include /etc/nginx/proxy_params;
            proxy_read_timeout 300s;  # Reports can take time to generate
        }

        # Service-specific health checks
        location /health/user {
            proxy_pass http://user_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/projects {
            proxy_pass http://project_task_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/comments {
            proxy_pass http://comment_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/attachments {
            proxy_pass http://attachment_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/notifications {
            proxy_pass http://notification_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/activities {
            proxy_pass http://activity_log_service/health;
            include /etc/nginx/proxy_params;
        }

        location /health/reports {
            proxy_pass http://reporting_service/health;
            include /etc/nginx/proxy_params;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # HTTPS server configuration (uncomment if you have SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name taskapp.local;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # Include the same location blocks as the HTTP server
    #     include /etc/nginx/conf.d/locations.conf;
    # }
}
